#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_pct_change_mon_1Q <- runoff_dt[, mean(value), by = mon]
#runoff_pct_change_mon_1Q
pct_change_to_next_month = function(val_1, val_2) {
pct <- ((val_2 - val_1) / val_1)
}
numerical_to_percentage = function(val_1) {
BASE_NUMBER <- 100
num <- (val_1 * BASE_NUMBER)
}
mean_mon_1 <- as.numeric(as.character(runoff_pct_change_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_pct_change_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_pct_change_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
NO_NEXT_MONTH_TO_COMPARE <- 0
runoff_pct_change_mon_1Q[, "%_delta_to_next_month" := c(delta_1_to_2, delta_2_to_3, NO_NEXT_MONTH_TO_COMPARE)]
runoff_pct_change_mon_1Q
#saveRDS(runoff_dt, file = './assignments/dt_assignment_1_20220321.rds') #As assignment
View(runoff_pct_change_mon_1Q)
View(runoff_dt)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_pct_change_mon_1Q <- runoff_dt[, mean(value), by = mon]
#runoff_pct_change_mon_1Q
View(runoff_pct_change_mon_1Q)
View(runoff_pct_change_mon_1Q)
runoff_pct_change_mon_1Q <- runoff_dt[, "month_mean" mean(value), by = mon]
runoff_pct_change_mon_1Q <- runoff_dt[, month_mean mean(value), by = mon]
runoff_pct_change_mon_1Q <- runoff_dt[, "month_mean" := mean(value), by = mon]
View(runoff_pct_change_mon_1Q)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_pct_change_mon_1Q <- runoff_dt[, "month_mean" := mean(value), by = mon]
#runoff_pct_change_mon_1Q
View(runoff_pct_change_mon_1Q)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
View(runoff_ts)
View(runoff_month)
runoff_pct_change_mon_1Q <- unique(runoff_month)
View(runoff_pct_change_mon_1Q)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_mon_1Q <- unique(runoff_month)
View(runoff_mon_1Q)
pct_change_to_next_month = function(val_1, val_2) {
pct <- ((val_2 - val_1) / val_1)
}
numerical_to_percentage = function(val_1) {
BASE_NUMBER <- 100
num <- (val_1 * BASE_NUMBER)
}
mean_mon_1 <- as.numeric(as.character(runoff_pct_change_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_pct_change_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_pct_change_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
mean_mon_1 <- as.numeric(as.character(runoff_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
NO_NEXT_MONTH_TO_COMPARE <- 0
runoff_pct_change_mon_1Q <- runoff_mon_1Q[, "%_delta_to_next_month" := c(delta_1_to_2, delta_2_to_3, NO_NEXT_MONTH_TO_COMPARE)]
#runoff_pct_change_mon_1Q
View(runoff_pct_change_mon_1Q)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_mon_1Q <- unique(runoff_month)
pct_change_to_next_month = function(val_1, val_2) {
pct <- ((val_2 - val_1) / val_1)
}
numerical_to_percentage = function(val_1) {
BASE_NUMBER <- 100
num <- (val_1 * BASE_NUMBER)
}
mean_mon_1 <- as.numeric(as.character(runoff_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
NO_NEXT_MONTH_TO_COMPARE <- 0
runoff_pct_change_mon_1Q <- runoff_mon_1Q[, "%_delta_to_next_month" := c(delta_1_to_2, delta_2_to_3, NO_NEXT_MONTH_TO_COMPARE)]
saveRDS(runoff_dt, file = './assignments/dt_assignment_1_20220321.rds') #As assignment
View(runoff_pct_change_mon_1Q)
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_mon_1Q <- unique(runoff_month)
pct_change_to_next_month = function(val_1, val_2) {
pct <- ((val_2 - val_1) / val_1)
}
numerical_to_percentage = function(val_1) {
BASE_NUMBER <- 100
num <- (val_1 * BASE_NUMBER)
}
mean_mon_1 <- as.numeric(as.character(runoff_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
NO_NEXT_MONTH_TO_COMPARE <- 0
runoff_pct_change_mon_1Q <- runoff_mon_1Q[, "%_delta_to_next_month" := c(delta_1_to_2, delta_2_to_3, NO_NEXT_MONTH_TO_COMPARE)]
saveRDS(runoff_dt, file = './assignments/dt_assignment_1_20220321.rds') #As assignment
#install.packages("data.table") #In order to be able to use the data.table library,
#firstly has to be run only the first time, the line 1.
runoff <- 130 #m3/s
runoff_ts <- data.frame(time = as.Date(1:90, origin = '2020/12/31'),
value = sample(c(130, 135, 140),
size = 90, replace = T))
head(runoff_ts)
library(data.table)
runoff_dt <- data.table(runoff_ts)
runoff_dt[value > 130]
runoff_dt[value > 130, mean(value)]
runoff_dt[value > 130, mean(value), by = month(time)]
runoff_dt[, mon := month(time)]
runoff_dt[, mon_mean := mean(value), by = mon]
runoff_month <- runoff_dt[, .(mon, mon_mean)]
runoff_month
unique(runoff_month)
#saveRDS(runoff_dt, file = './data/dt_example.rds') #During seminar
# Begin of Assignment on this previous code
runoff_mon_1Q <- unique(runoff_month)
pct_change_to_next_month = function(val_1, val_2) {
pct <- ((val_2 - val_1) / val_1)
}
numerical_to_percentage = function(val_1) {
BASE_NUMBER <- 100
num <- (val_1 * BASE_NUMBER)
}
mean_mon_1 <- as.numeric(as.character(runoff_mon_1Q[1, 2]))
mean_mon_2 <- as.numeric(as.character(runoff_mon_1Q[2, 2]))
mean_mon_3 <- as.numeric(as.character(runoff_mon_1Q[3, 2]))
delta_1_to_2 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_1, mean_mon_2))
delta_2_to_3 <- numerical_to_percentage(pct_change_to_next_month(mean_mon_2, mean_mon_3))
NO_NEXT_MONTH_TO_COMPARE <- 0
runoff_pct_change_mon_1Q <- runoff_mon_1Q[, "%_delta_to_next_month" := c(delta_1_to_2, delta_2_to_3, NO_NEXT_MONTH_TO_COMPARE)]
saveRDS(runoff_dt, file = './assignments/dt_assignment_1_20220321.rds') #As assignment
install.packages("DEoptim")
readMOPEXdsets = function(filename){
x = read.fwf(filename, widths = c(8, rep(10, 5)), col.names = c('Date', 'P', 'E', 'Q', 'Tax', 'Tmin'))
#Cleaning dataset
identicationOfna = which(x[['Q']] == -99)
xClear = x[1:identificationOfna[1] - 1, ]
#Split data into training and testing, make list together
xTraining = xClear[1:floor(nrow(xClear)/2), ]
xValidation = xClear[(floor(nrow(xClear)/2) + 1):nrow(xClear), ]
list(Training = xTraining, Validation = xValidation)
}
source("Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar/ReadingMOPEX.R")
source("Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar/ReadingMOPEX.R")
readMOPEXdsets = function(filename){
x = read.fwf(filename, widths = c(8, rep(10, 5)), col.names = c('Date', 'P', 'E', 'Q', 'Tax', 'Tmin'), as.is = TRUE)
#Cleaning dataset
identicationOfna = which(x[['Q']] == -99)
xClear = x[1:identificationOfna[1] - 1, ]
#Split data into training and testing, make list together
xTraining = xClear[1:floor(nrow(xClear)/2), ]
xValidation = xClear[(floor(nrow(xClear)/2) + 1):nrow(xClear), ]
list(Training = xTraining, Validation = xValidation)
}
source('ReadingMOPEX.R')
source("Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar/ReservoirDEoptim2022.R")
source('Criteria.R')
data = readMOPEXdsets('01048000.dly')
setwd('Z:\PRAHA\CZU\CLASES\ZVX116E - Machine Learning\Part2\20220322\seminar')
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
data = readMOPEXdsets('01048000.dly')
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
str(data)
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
str(Tdata)
M1 = function(p, e, k, a, ce){
#  MI as in Fenicia 2014
#  p...precipitation
#  e...potential evapotranspiration
#  k, a, ce...parameters of the reservoir M1
#  S...storage
#  Q...discharge
n = length(p)
S = 0
Q = numeric(n)
for(i in 1:n){
s = s + p[i] - ce * e[i]
if (s < 0) S = 0
Q[i] = k * S^a
s = s - Q[i]
}
}
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
str(data)
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
str(Tdata)
## Model of a water reservoir
## Fenicia, Fabrizio, et al. "Catchment properties, function, and conceptual
## model representation: is there a correspondence?
## ...
M1 = function(p, e, k, a, ce){
#  MI as in Fenicia 2014
#  p...precipitation
#  e...potential evapotranspiration
#  k, a, ce...parameters of the reservoir M1
#  S...storage
#  Q...discharge
n = length(p)
S = 0
Q = numeric(n)
for(i in 1:n){
s = s + p[i] - ce * e[i]
if (s < 0) S = 0
Q[i] = k * S^a
s = s - Q[i]
}
Q
}
K = 0.3
A = 1.1
CE = 1
QsimTrain = M1(Tdata[["P"]], Tdata[['E']], K, A, CE)
## SEMINAR 20220322
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
str(data)
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
str(Tdata)
## Model of a water reservoir
## Fenicia, Fabrizio, et al. "Catchment properties, function, and conceptual
## model representation: is there a correspondence?
## ...
M1 = function(p, e, k, a, ce){
#  MI as in Fenicia 2014
#  p...precipitation
#  e...potential evapotranspiration
#  k, a, ce...parameters of the reservoir M1
#  S...storage
#  Q...discharge
n = length(p)
S = 0
Q = numeric(n)
for(i in 1:n){
S = S + p[i] - ce * e[i]
if (S < 0) S = 0
Q[i] = k * S^a
S = S - Q[i]
}
Q
}
K = 0.3
A = 1.1
CE = 1
QsimTrain = M1(Tdata[["P"]], Tdata[['E']], K, A, CE)
QsimVal = M1(Vdata[["P"]], Vdata[['E']], K, A, CE)
## SEMINAR 20220322
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
str(data)
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
str(Tdata)
## Model of a water reservoir
## Fenicia, Fabrizio, et al. "Catchment properties, function, and conceptual
## model representation: is there a correspondence?
## ...
M1 = function(p, e, k, a, ce){
#  MI as in Fenicia 2014
#  p...precipitation
#  e...potential evapotranspiration
#  k, a, ce...parameters of the reservoir M1
#  S...storage
#  Q...discharge
n = length(p)
S = 0
Q = numeric(n)
for(i in 1:n){
S = S + p[i] - ce * e[i]
if (S < 0) S = 0
Q[i] = k * S^a
S = S - Q[i]
}
Q
}
K = 0.3
A = 1.1
CE = 1
QsimTrain = M1(Tdata[["P"]], Tdata[['E']], K, A, CE)
QsimVal = M1(Vdata[["P"]], Vdata[['E']], K, A, CE)
Criteria(Tdata[["Q"]], QsimTrain)[['NS']]
par(mfrow = c(2,2))
plot(Tdata[['Q']])
lines(QsimTrain, col = 'red')
wm = which.max(Tdata[['Q']])
range2plot = (wm-50):(wm+100)
plot(Tdata[['Q']])[range2plot]
lines(QsimTrain[range2plot], col = 'red')
## SEMINAR 20220322
setwd('Z:/PRAHA/CZU/CLASES/ZVX116E - Machine Learning/Part2/20220322/seminar')
source('Criteria.R')
source('ReadingMOPEX.R')
data = readMOPEXdsets('01048000.dly')
str(data)
Tdata = data.frame(data[["Training"]][c('P', 'E', 'Q')])
Vdata = data.frame(data[["Validation"]][c('P', 'E', 'Q')])
str(Tdata)
## Model of a water reservoir
## Fenicia, Fabrizio, et al. "Catchment properties, function, and conceptual
## model representation: is there a correspondence?
## ...
M1 = function(p, e, k, a, ce){
#  MI as in Fenicia 2014
#  p...precipitation
#  e...potential evapotranspiration
#  k, a, ce...parameters of the reservoir M1
#  S...storage
#  Q...discharge
n = length(p)
S = 0
Q = numeric(n)
for(i in 1:n){
S = S + p[i] - ce * e[i]
if (S < 0) S = 0
Q[i] = k * S^a
S = S - Q[i]
}
Q
}
K = 0.3
A = 1.1
CE = 1
QsimTrain = M1(Tdata[["P"]], Tdata[['E']], K, A, CE)
QsimVal = M1(Vdata[["P"]], Vdata[['E']], K, A, CE)
Criteria(Tdata[["Q"]], QsimTrain)[['NS']]
par(mfrow = c(2,2))
plot(Tdata[['Q']])
lines(QsimTrain, col = 'red')
wm = which.max(Tdata[['Q']])
range2plot = (wm-50):(wm+100)
plot(Tdata[['Q']][range2plot])
lines(QsimTrain[range2plot], col = 'red')
plot(Vdata[['Q']])
lines(QsimVal, col = 'red')
wm = which.max(Vdata[['Q']])
range2plot = (wm-50):(wm+100)
plot(Vdata[['Q']][range2plot])
lines(QsimTrain[range2plot], col = 'red')
K = par[1]
A = par[2]
CE = par[3]
computedValues = M1(Tdata[["P"]], Tdata[["E"]], K, A, CE)
# Nash-Suttclife criterion
fitOpt = 1 - Criteria(Tdata[["Q"]], computedValues)[['NS']]
fitOpt
}
K = par[1]
par){
K = par[1]
A = par[2]
CE = par[3]
computedValues = M1(Tdata[["P"]], Tdata[["E"]], K, A, CE)
# Nash-Suttclife criterion
fitOpt = 1 - Criteria(Tdata[["Q"]], computedValues)[['NS']]
fitOpt
}
# Objective function... the function minim of which we are lookgin for
optFun = function(par) {
K = par[1]
A = par[2]
CE = par[3]
computedValues = M1(Tdata[["P"]], Tdata[["E"]], K, A, CE)
# Nash-Suttclife criterion
fitOpt = 1 - Criteria(Tdata[["Q"]], computedValues)[['NS']]
fitOpt
}
